#Student RESTful Web Service

##URIs
GET 	/students 		<--get all list of students: internally HTTP status CODE:200 OK -->if not found then 404
GET 	/students/{id} 	<--get single student by id: internally HTTP status CODE:200 OK 
							-->if not found then HttpStatus.NotFound 404 and throw StudentNotFoundException
POST 	/students		<--create single student-->Return 	HttpStatus.CREATED 201 and URI where resource created
PUT		/students		<--update single student by id
DELETE	/students/{id}	<--delete single student by id

GET 	/students/{id}/subjects		<--get all subject by student id 


## development activity contents
-----------------16May2020-----------------
Exception Handling
Validations
Student resources created 
------------------17May2020-----------------------------
Adding H2 db, Create JPA Repository
Static and Dynamic filtering
------------------nextday-----------------------------
i18n
Content Negotiation for support of XML
HATEOAS
Swagger
Spring Boot Actuator
WEbService Version-ing

We can Say tool of Cloud 
=========================================================================================================
Feign <-- is Rest web service client
Steps to use 
Step 1. Add dependency 			
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
			
Step 2. @EnableFeignClients("com.in28minutes.currencyconversionservice")

Ex. 
			package com.in28minutes.currencyconversionservice;

			import org.springframework.boot.SpringApplication;
			import org.springframework.boot.autoconfigure.SpringBootApplication;
			import org.springframework.cloud.openfeign.EnableFeignClients;

			@SpringBootApplication
			@EnableFeignClients("com.in28minutes.currencyconversionservice")
			public class CurrencyConversionServiceApplication {
			}
			
Step 3. @FeignClient

		Create proxy of service client which you want and Use annotation
	
Ex. 	@FeignClient(name = "currency-exchange-service", url = "localhost:8001")
		public interface CurrencyExchangeServiceProxy {
			@GetMapping(value = "currency-exchange/from/{from}/to/{to}")
			public ExchangeValue retriveExchangeValue(@PathVariable("from") String from, @PathVariable("to") String to);
		}

=========================================================================================================
Ribbon <--------client-side load balancer	<- Ribbon provides client side load balancing facility
Step 1. 	<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
	
Step 2. 	@FeignClient(name = "currency-exchange-service")
			@RibbonClient(name = "currency-exchange-service")
			public interface CurrencyExchangeServiceProxy {
				@GetMapping(value = "currency-exchange-service/from/{from}/to/{to}")
				public ExchangeValue retriveExchangeValue(@PathVariable("from") String from, @PathVariable("to") String to);
			}

	
	
Step 3. 	In property file: currency-conversion-service property file
	
			currency-exchange-service.ribbon.listOfServers=http://localhost:8000,http://localhost:8001
			
Problem with Ribbon 
				What if one or more client of currency-exchange-service needed ?
				we have to start that other clients on remaining port numbers like 8002/3/4/5
				and add in property file currency-conversion-service property file
				(AND THIS is the problem we have to restart server)
				Means head ace when number of currency-exchange-service increases/decreases.
				
				Can we use spring cloud config server to solve above problem.? 
				But we have to refresh (POST call to ) currency-conversion-service to reflect changes.
=========================================================================================================			
Eureka Server <-- Naming server (Service discovery)-- Naming Server provides Service Registration and Service= Discovery

Step 1. 	depenencies 
				Eureka server, config client(for storing propeties to cloud server),
				actuator, devtools
				
Step 2.  
			@SpringBootApplication
			@EnableEurekaServer
			public class DiscoveryServerApplication {

				public static void main(String[] args) {
					SpringApplication.run(DiscoveryServerApplication.class, args);
				}

			}

Step 3. 	application.properties
			server.port=8761
			eureka.client.register-with-eureka=false <-- because server dont register himself as client
			eureka.client.fetch-registry=false

Step 4. Check http://localhost:8761

			***************************Now Setting up Eureka Client***************************
					currency-exchange-service:8000
					currency-exchange-service:8001
					currency-exchange-service:8002
					currency-conversion-service:8100
					
					All above are Eureka Clients
Step 1. 	
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>

Step 2. 			
			
			@SpringBootApplication
			@EnableEurekaClient//@EnableDiscoveryClient
			@EnableFeignClients("com.in28minutes.currencyconversionservice")
			public class CurrencyConversionServiceApplication {
			}
Step 3. 
			add property in client properties
			eureka.client.service-url.default-zone:http://locahost:8761/eureka		
				
			***************************Eureka Client and Ribbon ---Connection***************************	
			As we know both Eureka Client and Ribbon, are using on client 
			Ribbon discovers other clients using property 
				currency-exchange-service.ribbon.listOfServers=http://localhost:8000,http://localhost:8001
			DISBLE above PROPERTY to use Eureka SERVER
=========================================================================================================================================			
ZUUL API GETWAY SERVER <--Netfilx provide this implementation
				--Autherntication, Autherization, Security
				--Rate Limit
				--Fault Tolerance
				--Service Aggregation
			
						
Step 1.	dependencies	<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>						
							<artifactId>spring-cloud-starter-netflix-zuul</artifactId>

						<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-starter-actuator</artifactId>
							<artifactId>spring-boot-devtools</artifactId


Step 2.		
					@EnableZuulProxy
					@EnableEurekaClient
					@SpringBootApplication
					public class NetfilxZuulApiGatewayServerApplication {


Step 3.			 	set application.property
					spring.application.name=netfilx-zuul-api-gateway-server
					server.port=8765	

Step 4.				using zuul for logging prupose, for that create class named filtering
					ex.

					package com.in28minutes.netfilxzuulapigatewayserver;

					import javax.servlet.http.HttpServletRequest;

					import org.slf4j.Logger;
					import org.slf4j.LoggerFactory;

					import com.netflix.zuul.ZuulFilter;
					import com.netflix.zuul.context.RequestContext;
					import com.netflix.zuul.exception.ZuulException;

					@Component
					public class ZuulLoggingFilter extends ZuulFilter {

						Logger logger = LoggerFactory.getLogger(this.getClass());

						@Override
						public boolean shouldFilter() {
							return true;
						}

						@Override
						public Object run() throws ZuulException {
							HttpServletRequest request = RequestContext.getCurrentContext().getRequest();
							logger.info("request->{}, request->", request, request.getRequestURI());
							return null;
						}

						@Override
						public String filterType() {
							return "pre";
						}

						@Override
						public int filterOrder() {
							return 1;
						}

					}



	**********************using zuul**************************************
		--for testing prupose	
				http://locahost:8765/{Application Name}/{URI}

				http://localhost:8765/currency-conversion-service/currency-conversion-service-feign/from/AUD/to/INR/quantity/10

				you can application name from Eureka server http://localhost:8761 or application.property file
				and uri from GetMapping on RestController method

		--Another way modify			
				Ex.
				Before 

				//@FeignClient(name = "currency-exchange-service", url = "localhost:8001")
				@FeignClient(name = "currency-exchange-service")
				@RibbonClient(name = "currency-exchange-service")
				public interface CurrencyExchangeServiceProxy {
					@GetMapping(value = "/ces/from/{from}/to/{to}")
					public ExchangeValue retriveExchangeValue(@PathVariable("from") String from, @PathVariable("to") String to);
				}
				
				To looging using ZUUL API GATEWAY Modify accorind to above URL in application where you are using int
				--acutally your are calling gateway server + {Application Name} + {URI}

				Ex.

				@FeignClient(name = "netfilx-zuul-api-gateway-server")
				@RibbonClient(name = "currency-exchange-service")
				public interface CurrencyExchangeServiceProxy {
					@GetMapping(value = "/currency-exchange-service/ces/from/{from}/to/{to}")
					public ExchangeValue retriveExchangeValue(@PathVariable("from") String from, @PathVariable("to") String to);
				}

				Ex of URL
				http://localhost:8765/currency-conversion-service/ccs-feign/from/ZUD/to/INR/quantity/10
				http://localhost:8765/currency-exchange-service/ces/from/USA/to/INR
====================================================================================================================================================
SPRING CLOUD SLEUTH

Distributed Tracing--is centralized location to get information for what happen to specific request
What diffenent components of micro-services

spring-cloud Sleuth<--assign unique id to request so that we can trace it accross components
Zipkin is Distributed Tracing- system
		====Adding spring-cloud Sleuth to application
Step 1.		dependencies	<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-sleuth</artifactId>

Step 2. 	Add this code in main class
			@Bean
			public Sampler defaultSampler() {
				return Sampler.ALWAYS_SAMPLE;
			}
Follow above two steps for application where do you want Sleuth 			
===========================================================================================================================
ZIPKIN
Sleuth assign unique Id for each request, request travels with unique id, So from this unique id we can trace request.
But application log are not centralized, these are application wise, we have to check individual log with unique id, So it is difficult job.

we can centralized log with ELK Stack: Elasticsearch, Logstash, Kibana 
we are using Zipkin tracing server

D:\githubRepo\in28minutesWorkspace\in28minutes <--- zipkin jar present here



		==============================================
		Connecting application to zipkin or rabitmq
		Step 1.		dependencies	


					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-zipkin</artifactId>    <-- by this we can log message in format which zipkin can understand
					</dependency>
					<dependency>
						<groupId>org.springframework.amqp</groupId>
						<artifactId>spring-rabbit</artifactId>
					</dependency>

==========================================================================================================================
Connect RABBITMQ and ZIPKIN
After connection Zipkin listen to rabbitmq
Step 1.		Check rabbitmq is working by checking servises in Windows 
Step 2. 	Run commands on cmd
			SET RABBIT_URI=amqp://localhost
			java -jar zipkin.jar									


			now to run complete application we require
				--naming server Eureka running -->8761
				--api gateway running Zuul-->8765
				--currency conversion service running--->8100
				--currency exchange service running-->8000 or 8001
				--zipkin server running with listening to rabbitmq from command prompt -->9411
===========================================================================================================================
SPRING CLOUD CONFIG SERVER
		--On fly property change reflection using Spring-cloud-config-server
		--Client application must have follwoing dependency
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-actuator</artifactId>
				</dependency>

		--also add property to client application to expose all urls
				spring.cloud.config.uri=http://localhost:8888
				management.security.enabled=false						<--- turn off spring security on spring boot actuator
				management.endpoints.web.exposure.include=*				<-- exposeing all endpoints or simply add refresh
		--fire post request for application for which you want to changes for property file
				ex. POST-->http://locahost:8080/actuator/refresh  //in this only changes reflected to one application
===========================================================================================================================
SPRING CLOUD BUS Configuration
	we are running spring cloud bus over rabbitmq (you can use kafka). At application startup all instatcnes of microservices
	register themself with spring cloud bus. When there is any change is configuration, then refresh is called on any of the instatnce(like on port 8080,8081)
	Then this microservice instance send event to spring cloud bus, and this event is propogated to all other instance. 
	POST-->http://locahost:8080/bus/refresh URL hit it 

	dependency needed is 
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-bus-amqp</artifactId>
			</dependency>
	now 
		hit url
			POST-->http://locahost:8080/bus/refresh				//with single hit all other application get changed
============================================================================================================================			
HYSTRIX ---->Fault Tolerance

Step 1.		<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-hystrix</artifactId>
			</dependency>

Step 2.		@SpringBootApplication
			@EnableHystrix

Step 3.		@HystrixCommand(fallbackMethod="")   <-- on @RestController method
===================================================================================
Calling service from cmd 
>java  -Dserver.port=8090 -jar servicename.jar